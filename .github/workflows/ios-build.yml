name: iOS Build

on:
  pull_request: { branches: [ main ] }
  push: { branches: [ chore/*, feature/*, fix/* ] }

jobs:
  build:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4

      - name: Select Xcode
        run: sudo xcode-select -s "/Applications/Xcode.app"

      - name: Detect project / target / scheme
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          # Prefer Echo.xcodeproj, else SNAPS.xcodeproj, else first found
          if [[ -e Echo.xcodeproj ]]; then PROJECT="Echo.xcodeproj"
          elif [[ -e SNAPS.xcodeproj ]]; then PROJECT="SNAPS.xcodeproj"
          else PROJECT="$(find . -maxdepth 3 -type d -name '*.xcodeproj' | head -n1 || true)"; fi
          [[ -z "${PROJECT:-}" ]] && { echo "::error ::No .xcodeproj found"; exit 1; }

          # Parse targets (trim), drop empty & *Tests
          TARGETS=$(/usr/bin/xcodebuild -list -project "$PROJECT" 2>/dev/null | \
            awk '/Targets:/{on=1;next} /Build Configurations:/{on=0} on' | \
            sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | \
            awk 'NF && $0 !~ /(Tests|UITests)$/' || true)

          # Parse schemes (trim)
          SCHEMES=$(/usr/bin/xcodebuild -list -project "$PROJECT" 2>/dev/null | \
            awk '/Schemes:/{on=1;next} on' | \
            sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | awk 'NF' || true)

          # Choose target: prefer Echo > SNAPS > first
          if printf "%s\n" "$TARGETS" | grep -Fxq 'Echo'; then TARGET='Echo'
          elif printf "%s\n" "$TARGETS" | grep -Fxq 'SNAPS'; then TARGET='SNAPS'
          else TARGET="$(printf "%s\n" "$TARGETS" | head -n1)"; fi

          # Choose scheme (optional): prefer Echo/EchoCI > SNAPS > first
          if printf "%s\n" "$SCHEMES" | grep -Fxq 'Echo'; then SCM='Echo'
          elif printf "%s\n" "$SCHEMES" | grep -Fxq 'EchoCI'; then SCM='EchoCI'
          elif printf "%s\n" "$SCHEMES" | grep -Fxq 'SNAPS'; then SCM='SNAPS'
          else SCM="$(printf "%s\n" "$SCHEMES" | head -n1)"; fi

          echo "project=$PROJECT" >> "$GITHUB_OUTPUT"
          echo "target=$TARGET"   >> "$GITHUB_OUTPUT"
          echo "scheme=$SCM"      >> "$GITHUB_OUTPUT"
          echo "Detected project: $PROJECT"
          echo "Detected target:  ${TARGET:-<none>}"
          echo "Detected scheme:  ${SCM:-<none>}"

      - name: Build (Debug, simulator, no signing)
        if: ${{ steps.detect.outputs.target != '' || steps.detect.outputs.scheme != '' }}
        shell: bash
        run: |
          set -euo pipefail
          PROJ="${{ steps.detect.outputs.project }}"
          TGT="${{ steps.detect.outputs.target }}"
          SCM="${{ steps.detect.outputs.scheme }}"
          if [[ -n "$SCM" ]]; then
            echo "Building by scheme: $SCM"
            xcodebuild \
              -project "$PROJ" \
              -scheme  "$SCM" \
              -configuration Debug \
              -sdk iphonesimulator \
              -destination "generic/platform=iOS Simulator" \
              CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO \
              ONLY_ACTIVE_ARCH=YES \
              build
          else
            echo "Building by target: $TGT"
            xcodebuild \
              -project "$PROJ" \
              -target   "$TGT" \
              -configuration Debug \
              -sdk iphonesimulator \
              -destination "generic/platform=iOS Simulator" \
              CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO \
              ONLY_ACTIVE_ARCH=YES \
              build
          fi

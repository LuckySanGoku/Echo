name: iOS Build

on:
  pull_request: { branches: [ main ] }
  push: { branches: [ chore/*, feature/*, fix/* ] }

jobs:
  build:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4

      - name: Select Xcode
        run: sudo xcode-select -s "/Applications/Xcode.app"

      - name: Detect project / target (trim + prefer app target)
        id: detect
        shell: bash
        run: |
          set -euo pipefail

          # Prefer Echo.xcodeproj, else SNAPS.xcodeproj, else first found
          if [[ -e Echo.xcodeproj ]]; then PROJECT="Echo.xcodeproj"
          elif [[ -e SNAPS.xcodeproj ]]; then PROJECT="SNAPS.xcodeproj"
          else PROJECT="$(find . -maxdepth 3 -type d -name '*.xcodeproj' | head -n1 || true)"; fi
          [[ -z "${PROJECT:-}" ]] && { echo "::error ::No .xcodeproj found"; exit 1; }

          # Extract Targets block, trim whitespace, drop empties and *Tests/UITests
          TARGETS=$(/usr/bin/xcodebuild -list -project "$PROJECT" 2>/dev/null | \
            awk '/Targets:/{on=1;next} /Build Configurations:/{on=0} on' | \
            sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | \
            awk 'NF && $0 !~ /(Tests|UITests)$/' || true)

          echo "Targets seen:"
          printf "%s\n" "$TARGETS"

          # Choose target: Echo > SNAPS > first non-test
          if printf "%s\n" "$TARGETS" | grep -Fxq 'Echo'; then TARGET='Echo'
          elif printf "%s\n" "$TARGETS" | grep -Fxq 'SNAPS'; then TARGET='SNAPS'
          else TARGET="$(printf "%s\n" "$TARGETS" | head -n1)"; fi

          [[ -z "${TARGET:-}" ]] && { echo "::error ::Could not detect a buildable target."; exit 1; }

          echo "project=$PROJECT" >> "$GITHUB_OUTPUT"
          echo "target=$TARGET"   >> "$GITHUB_OUTPUT"
          echo "Detected project: $PROJECT"
          echo "Detected target:  $TARGET"

      - name: Build (Debug, generic iOS Simulator, no signing)
        shell: bash
        run: |
          set -euo pipefail
          xcodebuild \
            -project "${{ steps.detect.outputs.project }}" \
            -target  "${{ steps.detect.outputs.target }}" \
            -configuration Debug \
            -destination "generic/platform=iOS Simulator" \
            CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO \
            build
